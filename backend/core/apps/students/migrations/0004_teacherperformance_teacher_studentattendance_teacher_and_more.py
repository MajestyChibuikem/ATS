# Generated by Django 5.1.6 on 2025-08-11 09:55

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('students', '0003_studentscore_student_sco_total_s_b3e2a1_idx_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TeacherPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(help_text='Academic year (e.g., 2023/2024)', max_length=20)),
                ('average_class_score', models.DecimalField(decimal_places=2, help_text='Average class score under this teacher', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('number_of_students', models.IntegerField(help_text='Number of students taught by this teacher', validators=[django.core.validators.MinValueValidator(0)])),
                ('pass_rate', models.DecimalField(decimal_places=2, help_text='Percentage of students who passed', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('student_satisfaction_rating', models.DecimalField(decimal_places=2, help_text='Student satisfaction rating (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('professional_development_hours', models.IntegerField(help_text='Professional development hours completed', validators=[django.core.validators.MinValueValidator(0)])),
                ('class_attendance_rate', models.DecimalField(decimal_places=3, help_text='Class attendance rate (0-1)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Record last update timestamp')),
            ],
            options={
                'verbose_name': 'Teacher Performance',
                'verbose_name_plural': 'Teacher Performance',
                'db_table': 'teacher_performance',
                'ordering': ['teacher', 'subject', 'academic_year'],
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_id', models.CharField(help_text='Unique teacher identifier', max_length=20, unique=True)),
                ('name', models.CharField(help_text="Teacher's full name", max_length=200)),
                ('years_experience', models.IntegerField(help_text='Total years of teaching experience', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('qualification_level', models.CharField(choices=[('HND + PGDE', 'HND + PGDE'), ('B.Sc + PGDE', 'B.Sc + PGDE'), ('B.Ed', 'B.Ed'), ('M.Ed', 'M.Ed'), ('PhD', 'PhD')], help_text="Teacher's highest qualification", max_length=50)),
                ('specialization', models.CharField(choices=[('Mathematics', 'Mathematics'), ('Sciences', 'Sciences'), ('Languages', 'Languages'), ('Arts', 'Arts'), ('General', 'General')], help_text="Teacher's primary specialization", max_length=50)),
                ('teaching_load', models.IntegerField(help_text='Teaching hours per week', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(40)])),
                ('performance_rating', models.DecimalField(decimal_places=2, help_text='Teacher performance rating (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('years_at_school', models.IntegerField(help_text='Years of service at current school', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Record last update timestamp')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the teacher is currently active')),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
                'db_table': 'teachers',
                'ordering': ['teacher_id'],
                'indexes': [models.Index(fields=['teacher_id'], name='teachers_teacher_456fe5_idx'), models.Index(fields=['specialization'], name='teachers_special_d0cc75_idx'), models.Index(fields=['qualification_level'], name='teachers_qualifi_6861c1_idx'), models.Index(fields=['performance_rating'], name='teachers_perform_086e11_idx'), models.Index(fields=['is_active'], name='teachers_is_acti_d8ca50_idx')],
            },
        ),
        migrations.AddField(
            model_name='studentattendance',
            name='teacher',
            field=models.ForeignKey(blank=True, help_text='Teacher responsible for this class', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attendance_records', to='students.teacher'),
        ),
        migrations.AddField(
            model_name='studentbehavior',
            name='teacher',
            field=models.ForeignKey(blank=True, help_text='Teacher who observed this behavior', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='behavior_records', to='students.teacher'),
        ),
        migrations.AddField(
            model_name='studentscore',
            name='teacher',
            field=models.ForeignKey(blank=True, help_text='Teacher who taught this subject', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_scores', to='students.teacher'),
        ),
        migrations.AddIndex(
            model_name='studentattendance',
            index=models.Index(fields=['teacher', 'date'], name='student_att_teacher_b47c9e_idx'),
        ),
        migrations.AddIndex(
            model_name='studentbehavior',
            index=models.Index(fields=['teacher', 'date'], name='student_beh_teacher_64a4b1_idx'),
        ),
        migrations.AddIndex(
            model_name='studentscore',
            index=models.Index(fields=['teacher'], name='student_sco_teacher_0fc070_idx'),
        ),
        migrations.AddIndex(
            model_name='studentscore',
            index=models.Index(fields=['teacher', 'subject'], name='student_sco_teacher_e99861_idx'),
        ),
        migrations.AddIndex(
            model_name='studentscore',
            index=models.Index(fields=['teacher', 'total_score'], name='student_sco_teacher_f9dacf_idx'),
        ),
        migrations.AddField(
            model_name='teacherperformance',
            name='subject',
            field=models.ForeignKey(help_text='Subject for this performance record', on_delete=django.db.models.deletion.CASCADE, related_name='teacher_performance', to='students.subject'),
        ),
        migrations.AddField(
            model_name='teacherperformance',
            name='teacher',
            field=models.ForeignKey(help_text='Teacher for this performance record', on_delete=django.db.models.deletion.CASCADE, related_name='performance_records', to='students.teacher'),
        ),
        migrations.AddIndex(
            model_name='teacherperformance',
            index=models.Index(fields=['teacher', 'subject'], name='teacher_per_teacher_652b98_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherperformance',
            index=models.Index(fields=['academic_year'], name='teacher_per_academi_5af06e_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherperformance',
            index=models.Index(fields=['average_class_score'], name='teacher_per_average_63cd32_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherperformance',
            index=models.Index(fields=['pass_rate'], name='teacher_per_pass_ra_8bc192_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherperformance',
            index=models.Index(fields=['student_satisfaction_rating'], name='teacher_per_student_9cddaf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teacherperformance',
            unique_together={('teacher', 'subject', 'academic_year')},
        ),
    ]
