# Generated by Django 5.1.6 on 2025-08-06 13:20

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(help_text='Academic year (e.g., 2023/2024)', max_length=20)),
                ('term', models.CharField(choices=[('First Term', 'First Term'), ('Second Term', 'Second Term'), ('Third Term', 'Third Term')], help_text='Academic term', max_length=20)),
                ('start_date', models.DateField(help_text='Term start date')),
                ('end_date', models.DateField(help_text='Term end date')),
                ('is_current', models.BooleanField(default=False, help_text='Whether this is the current academic period')),
            ],
            options={
                'verbose_name': 'Academic Year',
                'verbose_name_plural': 'Academic Years',
                'db_table': 'academic_years',
                'ordering': ['-year', 'term'],
                'indexes': [models.Index(fields=['year'], name='academic_ye_year_e481bb_idx'), models.Index(fields=['term'], name='academic_ye_term_0946e1_idx'), models.Index(fields=['is_current'], name='academic_ye_is_curr_307122_idx')],
                'unique_together': {('year', 'term')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(help_text='Unique student identifier', max_length=20, unique=True)),
                ('first_name', models.CharField(help_text="Student's first name", max_length=100)),
                ('last_name', models.CharField(help_text="Student's last name", max_length=100)),
                ('date_of_birth', models.DateField(help_text="Student's date of birth")),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], help_text="Student's gender", max_length=10)),
                ('current_class', models.CharField(choices=[('SS1', 'Senior Secondary 1'), ('SS2', 'Senior Secondary 2'), ('SS3', 'Senior Secondary 3')], help_text='Current academic class', max_length=10)),
                ('stream', models.CharField(choices=[('Science', 'Science'), ('Arts', 'Arts'), ('Commercial', 'Commercial')], help_text='Academic stream', max_length=20)),
                ('admission_date', models.DateField(default=django.utils.timezone.now, help_text='Date of admission')),
                ('guardian_name', models.CharField(help_text='Parent/Guardian name', max_length=200)),
                ('guardian_contact', models.CharField(help_text="Guardian's phone number", max_length=20)),
                ('guardian_email', models.EmailField(blank=True, help_text="Guardian's email address", max_length=254, null=True)),
                ('address', models.TextField(help_text="Student's residential address")),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Record last update timestamp')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the student is currently active')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'db_table': 'students',
                'ordering': ['student_id'],
                'indexes': [models.Index(fields=['student_id'], name='students_student_1ff8ed_idx'), models.Index(fields=['current_class'], name='students_current_d940ba_idx'), models.Index(fields=['stream'], name='students_stream_9d98a8_idx'), models.Index(fields=['is_active'], name='students_is_acti_4aecc9_idx')],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Subject name', max_length=100, unique=True)),
                ('code', models.CharField(help_text='Subject code', max_length=10, unique=True)),
                ('category', models.CharField(choices=[('Core', 'Core Subject'), ('Elective', 'Elective Subject'), ('Optional', 'Optional Subject')], help_text='Subject category', max_length=20)),
                ('stream', models.CharField(choices=[('All', 'All Streams'), ('Science', 'Science'), ('Arts', 'Arts'), ('Commercial', 'Commercial')], help_text='Applicable stream', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Subject description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the subject is currently active')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'db_table': 'subjects',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='subjects_name_ff98e0_idx'), models.Index(fields=['code'], name='subjects_code_3f80fa_idx'), models.Index(fields=['category'], name='subjects_categor_8c1690_idx'), models.Index(fields=['stream'], name='subjects_stream_0a6f66_idx')],
            },
        ),
        migrations.CreateModel(
            name='StudentAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Attendance date')),
                ('status', models.CharField(choices=[('Present', 'Present'), ('Absent', 'Absent'), ('Late', 'Late'), ('Excused', 'Excused')], help_text='Attendance status', max_length=20)),
                ('reason', models.TextField(blank=True, help_text='Reason for absence (if applicable)')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Record creation timestamp')),
                ('recorded_by', models.ForeignKey(blank=True, help_text='User who recorded this attendance', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(help_text='Student for this attendance record', on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Attendance',
                'verbose_name_plural': 'Student Attendance',
                'db_table': 'student_attendance',
                'ordering': ['-date', 'student'],
                'indexes': [models.Index(fields=['student', 'date'], name='student_att_student_39038c_idx'), models.Index(fields=['date'], name='student_att_date_1ee40f_idx'), models.Index(fields=['status'], name='student_att_status_9239ff_idx')],
                'unique_together': {('student', 'date')},
            },
        ),
        migrations.CreateModel(
            name='StudentBehavior',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Behavior record date')),
                ('category', models.CharField(choices=[('Academic', 'Academic'), ('Social', 'Social'), ('Disciplinary', 'Disciplinary'), ('Health', 'Health'), ('Other', 'Other')], help_text='Behavior category', max_length=50)),
                ('description', models.TextField(help_text='Description of the behavior')),
                ('severity', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], help_text='Severity level of the behavior', max_length=20)),
                ('action_taken', models.TextField(blank=True, help_text='Action taken in response')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Record creation timestamp')),
                ('recorded_by', models.ForeignKey(blank=True, help_text='User who recorded this behavior', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(help_text='Student for this behavior record', on_delete=django.db.models.deletion.CASCADE, related_name='behavior_records', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Behavior',
                'verbose_name_plural': 'Student Behavior',
                'db_table': 'student_behavior',
                'ordering': ['-date', 'student'],
                'indexes': [models.Index(fields=['student', 'date'], name='student_beh_student_45ad32_idx'), models.Index(fields=['category'], name='student_beh_categor_0dc5cc_idx'), models.Index(fields=['severity'], name='student_beh_severit_5362cc_idx')],
            },
        ),
        migrations.CreateModel(
            name='StudentScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('continuous_assessment', models.DecimalField(decimal_places=2, help_text='Continuous assessment score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('examination_score', models.DecimalField(decimal_places=2, help_text='Examination score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_score', models.DecimalField(decimal_places=2, help_text='Total score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grade', models.CharField(choices=[('A1', 'A1 (80-100)'), ('B2', 'B2 (70-79)'), ('B3', 'B3 (65-69)'), ('C4', 'C4 (60-64)'), ('C5', 'C5 (55-59)'), ('C6', 'C6 (50-54)'), ('D7', 'D7 (45-49)'), ('E8', 'E8 (40-44)'), ('F9', 'F9 (0-39)')], help_text='Grade based on total score', max_length=2)),
                ('remarks', models.TextField(blank=True, help_text='Additional remarks about the score')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Record last update timestamp')),
                ('academic_year', models.ForeignKey(help_text='Academic year for this score', on_delete=django.db.models.deletion.CASCADE, related_name='student_scores', to='students.academicyear')),
                ('student', models.ForeignKey(help_text='Student who received this score', on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='students.student')),
                ('subject', models.ForeignKey(help_text='Subject for this score', on_delete=django.db.models.deletion.CASCADE, related_name='student_scores', to='students.subject')),
            ],
            options={
                'verbose_name': 'Student Score',
                'verbose_name_plural': 'Student Scores',
                'db_table': 'student_scores',
                'ordering': ['student', 'subject', 'academic_year'],
                'indexes': [models.Index(fields=['student', 'subject'], name='student_sco_student_c01d85_idx'), models.Index(fields=['academic_year'], name='student_sco_academi_cb2d37_idx'), models.Index(fields=['total_score'], name='student_sco_total_s_b3e2a1_idx'), models.Index(fields=['grade'], name='student_sco_grade_2c7d02_idx')],
                'unique_together': {('student', 'subject', 'academic_year')},
            },
        ),
    ]
